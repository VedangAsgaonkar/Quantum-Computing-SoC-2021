Lines end with a  ;

CLASSICAL DATA TYPES:
https://docs.microsoft.com/en-us/azure/quantum/user-guide/language/typesystem/
No references or pointers are present

QUANTUM DATA TYPES:
1)Qubit : represents a single qubit. The Qubit s can be alterred only by operations. They can be passed to 
            functions, though they cannot be alterred there. In operations, they are alterred by a standard
            set of operations.
2)Pauli : 4 types PauliI , PauliX , PauliY , PauliZ . They represent a single qubit pauli gate. Mainly used
          to represent the basis of measurement.
3)Result : It specifies the result of a single qubit measurement in terms of the eigenvalue that was measured.
            0 indicates eigenvalue 1 = (-1)^0 was measured. 1 indicates eigenvalue -1 = (-1)^1 was measured.
The arithmetic library includes quantum arithmetic operations for both big-endian and little-endian quantum integers. It hence defines two types, BigEndian and LittleEndian, both of which contain a single anonymous item of type Qubit[]:
    newtype BigEndian = Qubit[];
    newtype LittleEndian = Qubit[];
CREATING CLASSICAL VARIABLES IN Q#
1)let : It creates immutable variables. Eg: let x = 1 ;
2)mutable: It creates mutable variables. Eg: mutable x = 1 ;
3)set: It alters mutable variables. Eg: set x = x + 1 ;

Allocating Quantum memory:
Qubits are allocated using the use statement. Their scope is either till the end of the namespace where they are made. 
Alternatively, the scope may be restricted to a block after the qubit declaration by using {} . 
            use qubit = Qubit() ;
            use (aux,register) = (Qubit() , Qubit[5]) ;
            use qubit = Qubit() {
            
            }
            use (aux,register) = (Qubit() , Qubit[5]){
            
            }
 The Qubits are always created in |0> state. 
 There is a restriction on how the scope must end. The Qubit scope can end either by measurement as the last operation on it. 
 Otherwise, the Qubit must be returned back to |0> before its scope ends. Failing to do so will lead to incorrect behaviour in
 future allocations.

COMMENTS:
Only single line comments are allowed. 
// comments give single line comments
/// gives markdown documentation comments

ARRAYS:
Arrays can be declared as
            mutable arr = new Int[10] ;
            let myArr = new Qubit[3] ;
 Elements can be accessed using[]
            let x = arr[2] ;
 Also the parameter inside the [] can be of type Range, thus giving an array slice
            let arr2 = arr[1..3..7] ;

CONDITIONALS:
Written as follows:
    if x==1 {
    //code
    }
    elif x > 3 {
    //code
    }
    else{
    //code
    }
    
ITERATIONS:
The for loop is used to iterate over the elements of an array or in a range. The loop
variable is immutable in code and local to the loop

for qubit in array_of_qubits{
    //code
}

for x in 0 .. 9 { // the .. operator is a both ends inclusive range
    //code
}

for x in 0 .. Length(array_of_qubits)-1{
    //code
}
    

CLASSICAL OPERATORS:
+ - * / % > < >= <= == != and or not ?: += -= *= /= %=
Additionaly the following are defined:
1) Copy and update:
    A w/ B <- C
    This returns the object A with its member B updated as C
    w/ is like a short form for "with"
    There is also a shorthand
    A w/= B<-C
    meaning
    A = A w/ B <- C
    
    The operator can also be used to manipulate a particular element or index of an array
    For eg:
    arr w/= 0 <- 3 means replace the element at index 0 with the number 3

2) Range:
    Written as start .. step .. stop
    Start is always inclusive. Stop is inclusive if it is possible to reach it from start by step sized steps
    We can also write start .. stop meaning step=1
    Also, ..step.. means start at the beginning, go till the end. A negative step means start from the end.
    
CALLABLES:
Callables come in 2 types: functions and operators. They can be declared in any order and can even access callables declared
after themselves. They can be directly/ indirectly recursive.

FUNCTIONS:
They represent purely deterministic behaviour. They are capable of performing classical operations. They can take qubits
as input, but they cannot alter them, nor call quantum operators.
They can be declared as:
function Hello( name: String , rollno : Int ) : String {
            if( rollno == 1 ){
                        return $"Hello {name} ";
            }
            else{
                        return "Error" ;
            }
}

QUANTUM OPERATIONS:
They are capable of altering qubits and performing classical as well as quantum computations.
They are declared as
            operation Swap( q1: Qubit , q2: Qubit) : Unit { //Unlike functions, in operators the qubits are actually passed. It is the qubit that gets alterred not a copy of it. Remember: arbitary qubits cannot be copied.
                                                            //The return type Unit means void
                        body( ... ){ //the ... means, all arguments will be used
                                    CNOT(q1, q2);
                                    CNOT(q2, q1);
                                    CNOT(q1, q2);
                        }
            }
            
Additionally, functors can be used in operations ( even in functions ) to specify additional features.
This is done as 
            operation Swap( q1: Qubit , q2: Qubit) : Unit is Adj+Ctl{
                        body( ... ){
                        
                        }
            }
 Q# automatically generates the Adj (adjoint) and Ctl (control) operations for the given operation. However autogeneration will
 occur only as long as mutable types are not involved. Autogeneration can even be done in case of a mixture of classical and quantum
 computations. However each operation/function called within the given operation must itself support Adj. Autogeneration fails in 
 case Measure is used.
 
 We can also manually specify the implementations of some/all of Adj , Ctl and the controlled adjoint ( note that Adj(Ctl) = Ctl(Adj) )
             operation Swap( q1: Qubit , q2: Qubit) : Unit is Adj+Ctl{
                        body( ... ){
                        
                        }
                        adjoint(...){
                        
                        }
                        controlled(...){
                        
                        }
                        controlled adjoint(...){
                        
                        }
            }
  
See also: https://docs.microsoft.com/en-us/azure/quantum/user-guide/language/programstructure/specializationdeclarations

To call the adjointed version of an operation A(args) , you call Adjoint A(args)
To call the controlled version of an operation A(args) , to be controlled by the qubit array Qubits[] named qubits,
we call Controlled A( qubits , args)

TYPE DECLERATIONS:
New data types can be made from primitive ones. 
            newtype Complex = (Real: Double, Imaginary : Double);
            newtype Nested = (Double, (ItemName : Int, String));
The items may be named/unnamed and may be nested as above.
Instantiation:
            let myNum = Complex(1.2 , 3.4 );
Access: The elements may be accessed either by name as:
            let re = myNum::Real ;
         They can also be accessed by deconstruction operator !
         Writing myNum! will return a tuple of shape (Double,Double)
         Similarly if we have myNest as an object of Nested, writing myNest! will return a tuple (DOuble,(Int,String))
         Now the elements can be accessed as:
            let (re,_) = myNum! ;
            let (x,(_,_)) = myNest! ;
         Here _ serves as a place holder.
Alterration: The mutable instances can be alterred uing the w/ <- operator.
            mutable comp = new Complex(1,2) ;
            comp w/= comp::Real<-3.14 ;
            
NAMESPACES:
All callables and Qubits must exist inside namespaces



